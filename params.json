{
  "name": "Fancyfizzbuzz",
  "tagline": "Anything Not Worth Engineering Is Worth OverEngineering. ",
  "body": "## Welcome to FancyFizzBuzz!, version 0.0.1\r\n\r\n## Installation: \r\n\r\n    $ npm run build\r\n\r\nCommand Line Usage (from root directory of this project): \r\n\r\n    $ node build/main.js <first> <last> (-h, -v) [-i <filename>] \r\n         [-o <filename>] [-m <first modulus> <second modulus>] \r\n         [-t “<first term>” “<second term>”]\r\n\r\n    where <first> and <last> are integers. \r\n\r\nFor integers larger than 9007199254740991 or less than -9007199254740991, be sure to write your numbers as strings from the command line, by putting them in quotes. Javascript can only handle numbers between -(2^53-1) and (2^53-1), so any number outside that range must be entered as a string.\r\n\r\n    Other parameters: (case insensitive)\r\n     node index.js -h (or -help)\r\n       => Read this help document\r\n     node index.js -v (or -version)\r\n       => Get version info\r\n     node index.js -i (or -input) [filename]\r\n       => Input min and max from text file. \r\n          This must be in the form \"#, #\"\r\n          (This is a fairly useless feature but can be expanded\r\n          to include JSON parameters for fine tuning on later features)\r\n     node index.js -o (or -output) [filename]\r\n       => Output to file, instead of console\r\n     node index.js -m (or -moduli) [fizz modulus] [buzz modulus]\r\n       => Define the string replacement conditions;\r\n          Defaults are 3 and 5, respectively.\r\n          Example: \r\n           $ node index.js 1 10 -m 2 5 \r\n           => “1, Fizz!, 3, Fizz!, Buzz!, \r\n               Fizz!, 7, Fizz!, 9, FizzBuzz!”\r\n     node index.js -t (or -terms) [fizz term] [buzz term]\r\n      => Redefine the strings to replace integers with\r\n          Example: \r\n           $ node index.js 1 7 -t “Foo” “Bar” \r\n           => “1, 2, Foo!, 4, Bar!, 7”\r\n \r\nNode Package Usage\r\n\r\nES6: \r\n      import {createFizzBuzz as fizzBuzz} from './lib/index'\r\nES5: \r\n      var fizzBuzz = require('./lib/index').createFizzBuzz\r\n\r\n    fizzBuzz(start, end, [firstMod, secondMod, firstModOutput, secondModOutput])\r\n      returns array\r\n\r\n    start: number to start the sequence (inclusive);\r\n      Integer, Required\r\n    end: Integer, number to end the sequence (inclusive);\r\n      Integer, Required\r\n    firstMod: First modulus number\r\n      Integer\r\n      Default 3\r\n    secondMod: Second modulus number\r\n      Integer\r\n      Default 5\r\n    firstModOutput: First replacement string.\r\n      String\r\n      Default \"Fizz\"\r\n    secondModOutput: Second replacement string.\r\n      String\r\n      Default \"Buzz\"\r\n\r\n\r\n### CHANGELOG: \r\n#### 12 MARCH 2016:\r\n\r\n* Fizzbuzz now works with numbers < -(2^53 - 1) and > (2^53 - 1), as per instructions;\r\n\r\n* Fixed bug where calling FizzBuzz with the -h or -v flag will show a warning message. \r\n\r\n* Discovered and fixed a bug where it was incorrectly shunting to process all integers as big integers, this was inefficient but did not affect functionality. \r\n\r\n* Fixing that bug caused me to discover a bug the tests did not pick up where a variable was misnamed. Fixed. \r\n\r\nStill to do:\r\n\r\n* Add responsive features so that user can quit from the command line. \r\n\r\n#### 6 MARCH 2016:\r\n\r\n------------------\r\nThese are completed features: \r\n\r\n* FizzBuzz works with any number from -999,999,999,999,999 to 999,999,999,999,999. \r\n\r\n* From the command line, FizzBuzz can read two numbers stored in a file and use them as inputs. \r\n\r\n* From the command line FizzBuzz can output to a file.\r\n\r\n* From the command line, if no output file is specified, it defaults to\r\n  logging to the console. \r\n\r\n* FizzBuzz outputs help instructions with the -h flag. \r\n\r\n* FizzBuzz outputs version numbers with the -v flag. \r\n\r\n* FizzBuzz can accept alternate moduli (other than 3 and 5).\r\n\r\n* FizzBuzz can accept alternate strings (other than \"Fizz\", and \"Buzz\").\r\n\r\n* FizzBuzz can be imported to another project as a library. \r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}