{"version":3,"sources":["constants.js","processInput.js","fizzbuzz.js","fileOperations.js","bigBuzz.js","index.js"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["const VERSION = 'v0.0.1';\n\nconst HELP_TEXT = 'Welcome to FancyFizzBuzz!, version '+ VERSION + '\\r\\n\\r\\nInstallation: \\r\\n==============================\\r\\n| $ npm run build\\r\\n==============================\\r\\n\\r\\nCommand Line Usage (from root directory of this project): \\r\\n==============================\\r\\n| $ node build\\/main.js <first> <last> (-h, -v) [-i <filename>] \\r\\n|        [-o <filename>] [-m <first modulus> <second modulus>] \\r\\n|        [-t \\u201C<first term>\\u201D \\u201C<second term>\\u201D]\\r\\n==============================\\r\\n\\r\\nwhere <first> and <last> are integers. \\r\\n\\r\\n* The program can handle any integers from -999,999,999,999,999 to \\r\\n999,999,999,999,999. \\r\\n\\r\\nOther parameters: (case insensitive)\\r\\n node index.js -h (or -help)\\r\\n   => Read this help document\\r\\n node index.js -v (or -version)\\r\\n   => Get version info\\r\\n node index.js -i (or -input) [filename]\\r\\n   => Input min and max from text file. \\r\\n      This must be in the form \\\"#, #\\\"\\r\\n      (This is a fairly useless feature but can be expanded\\r\\n      to include JSON parameters for fine tuning on later features)\\r\\n node index.js -o (or -output) [filename]\\r\\n   => Output to file, instead of console\\r\\n node index.js -m (or -moduli) [fizz modulus] [buzz modulus]\\r\\n   => Define the string replacement conditions;\\r\\n      Defaults are 3 and 5, respectively.\\r\\n      Example: \\r\\n       $ node index.js 1 10 -m 2 5 \\r\\n       => \\u201C1, Fizz!, 3, Fizz!, Buzz!, \\r\\n           Fizz!, 7, Fizz!, 9, FizzBuzz!\\u201D\\r\\n node index.js -t (or -terms) [fizz term] [buzz term]\\r\\n   => Redefine the strings to replace integers with\\r\\n      Example: \\r\\n       $ node index.js 1 7 -t \\u201CFoo\\u201D \\u201CBar\\u201D \\r\\n       => \\u201C1, 2, Foo!, 4, Bar!, 7\\u201D'\n\nexport {\n  VERSION,\n  HELP_TEXT\n}","// considered using optimist but it was a bit overkill.\nimport { HELP_TEXT, VERSION } from './constants'\n\nvar getArgumentsFromCommandLine = function(){\n  // \"clArgs\": \"Command Line Arguments\"\n  var clArgs = [];\n    process.argv.forEach(function (val, index, array) {\n      clArgs.push(val);\n  });\n  return clArgs.slice(2);\n}\n\n\n\nvar showAndRemoveSpecialFlags = function(args, flags, text){\n  var showed = false;\n  for (var i = 0; i < flags.length; i++){\n    if (args.indexOf(flags[i]) != -1){\n      if (!showed) {\n       console.log(text); // help text and version text should never be written to file.\n       showed = true;\n      }\n      // removes the flag.\n      args.splice(args.indexOf(flags[i]), 1)\n    }\n  }\n  return args;\n}\n\n// using the switch fall-through here.\nvar parseFlags = function(argObj, args){\n  for (var i = 0; i < args.length; i++){\n    switch(args[i]){\n      case '-m':\n      case '-moduli':\n        if(!isNaN(Number(args[i+1]))){\n          argObj.firstModulus = Number(args[i+1]);\n        }\n        if(!isNaN(Number(args[i+2]))){\n          argObj.secondModulus = Number(args[i+2]);\n        }\n        break;\n      case '-i':\n      case '-input':\n        argObj.input = args[i+1];\n        break;\n      case '-o':\n      case '-output':\n        argObj.output = args[i+1];\n        break;\n      case '-t':\n      case '-terms':\n        argObj.fizzTerm = args[i+1];\n        argObj.buzzTerm = args[i+2];\n      default:\n      break;\n    }\n  }\n  return argObj;\n}\n\nvar processInput = function(){\n  const helpFlags = ['-h', 'h', 'help', '-help', '--help', '--v'];\n  const versionFlags = ['-v', 'v', '-version', '--version', '--v'];\n  var args = getArgumentsFromCommandLine();\n  args = showAndRemoveSpecialFlags(args, versionFlags, VERSION);\n  args = showAndRemoveSpecialFlags(args, helpFlags, HELP_TEXT);\n    // at this point, args should only contain the flags we're interested in.\n    console.log(args); \n  var argumentObject = {\n    first: args[0], // required\n    last: args[1], // required\n    firstModulus: 3, // default.\n    secondModulus: 5, // default.\n    input: null,\n    output: null,\n    fizzTerm: \"Fizz\", // default.\n    buzzTerm: \"Buzz\", // default.\n  }\n\n  // modify the argument object with any special cases that the user has entered:\n  argumentObject = parseFlags(argumentObject, args);\n  return argumentObject;\n}\n\n\nexport { processInput }\n","// ./fizzbuzz.js\n\nvar fizzbuzzer = function (number, fizzer = 3, buzzer = 5, fizzOutput = \"Fizz\", buzzOutput = \"Buzz\") {\n    // one could argue that 0 is modulo all numbers, but I think this is better default behavior. \n    if (number === 0){ return 0 }; \n\n    if ((number % fizzer === 0) && (number % buzzer === 0)){\n        return \"\" + fizzOutput + buzzOutput + '!'\n    } else if (number % fizzer === 0) {\n        return (fizzOutput + \"!\")\n    } else if (number % buzzer === 0) {\n        return (buzzOutput + \"!\");\n    } else {\n        return number;\n    }\n}\n\nvar createFizzBuzz = function (start, end, fizzer = 3, buzzer = 5, fizzOutput = \"Fizz\", buzzOutput = \"Buzz\")  {\n    var output = []; \n    var incre = 1; \n    if (start > end) {\n      incre = -1;\n    }\n    for (var i = start; (end >= start) ? (i <= end) : (i >= end) ; i = i + incre) {\n        output.push(fizzbuzzer(i, fizzer, buzzer, fizzOutput, buzzOutput));\n    }\n    return output; \n}\n\nexport {\n    fizzbuzzer,\n    createFizzBuzz\n}\n","const fs = require('fs');\n\nimport { fizzbuzzer, createFizzBuzz } from './fizzbuzz';\n\n\n//Check to see if we will get the parameters from an input file.\n// instead of returning a value, we will be using callbacks to\n// send the data we need to the next step in the algorithm,\n// whether that's something we need to wait on a file read for\n// or something we can do immediately.\nfunction parseInputFile(inputObj) {\n  if (inputObj.input !== null) {\n    var fileName = inputObj.input;\n    fs.exists(fileName, function(exists) {\n      if (exists) {\n        fs.stat(fileName, function(error, stats) {\n          fs.open(fileName, \"r\", function(error, fd) {\n            var buffer = new Buffer(stats.size);\n            fs.read(fd, buffer, 0, buffer.length, null, function(\n              error, bytesRead, buffer) {\n              var data = buffer.toString(\"utf8\", 0, buffer.length);\n              // sneaky way of turning strings into data we can use.\n              data = JSON.parse('[' + data + ']');\n              inputObj.first = data[0];\n              inputObj.last = data[1];\n              // sadly, until async/await is fully implimented in ES7,\n              // we are stuck in this callback.\n              fs.close(fd);\n              delete inputObj.input; // we can delete this because we no longer need it. We have our numbers.\n              lockNums(inputObj); // call lockNums and pass in the new numbers we got from the file;\n            });\n          });\n        });\n      }\n    });\n  } else {\n    delete inputObj.input; // we can delete this because it was null to begin with.\n    lockNums(inputObj); // call lockNums and pass in the numbers\n  }\n}\n\n// because this is asynchronous, we must use callbacks, instead of return statements, to make sure that items\n// execute in the correct order. (On a refactor, promisification looks promising. No pun intended.)\n\nfunction lockNums(inputObj) { // like the name suggests, the numbers we're using will be locked by this point.\n  if (isNaN(inputObj.first) || isNaN(inputObj.last)) {\n    console.log(\"WARN: One or both parameters were NaN:\");\n    console.log(\"inputObj in lockNums(inputObj):\", inputObj)\n    // Oddly enough, some tests will produce this.\n    // this actually is a serious concern of mine but simply ran out of time.\n    return;\n  }\n\n  if (inputObj.output !== null) {\n    var stream = fs.createWriteStream(inputObj.output);\n    stream.once('open', function(fd) {\n      var streamOut = stream.write.bind(this); // bind(this) is needed, otherwise this._writableState will be undefined\n      writeOutAll(streamOut, inputObj); // dependency injection -- this way we don't have to write two different functions for outputting to file and outputing to the console.\n      stream.end();\n    });\n  } else {\n    writeOutAll(console.log, inputObj); // if we're not writing to a stream, we're writing to a console.\n  }\n}\n\nfunction writeOutAll(outputFunc, inputObj) { // output.func will either be a a file stream OR console.log, if no file was specified.\n\n  const chunkSize = 10000; // arbitrary.\n  var complete = false; // ends our while loop if true.\n  var checkpoint = inputObj.first;\n  var nextCheckpoint;\n  while (!complete) {\n    if (Math.abs(checkpoint - inputObj.last) < chunkSize) {\n      outputFunc( // console or file\n        JSON.stringify( // stream needs to be a string.\n          createFizzBuzz(checkpoint, inputObj.last, inputObj.firstModulus,\n            inputObj.secondModulus, inputObj.fizzTerm, inputObj.buzzTerm)\n        )\n        .slice(1, -1) // we want to take off those pesky array \"[\" and \"]\" characters, so that our number line is contiguous\n      );\n      complete = true;\n    } else {\n      if (checkpoint < inputObj.last) {\n        // if we're counting up.\n        nextCheckpoint = checkpoint + (chunkSize);\n      } else {\n        // if we're counting down.\n        nextCheckpoint = checkpoint - (chunkSize);\n      }\n      outputFunc( // console or file\n        JSON.stringify( // stream needs to be a string.\n          createFizzBuzz(checkpoint, nextCheckpoint - 1, inputObj.firstModulus,\n            inputObj.secondModulus, inputObj.fizzTerm, inputObj.buzzTerm)\n        )\n        .slice(1, -1) + ',' // we want to take off those pesky array \"[\" and \"]\" characters, so that our number line is contiguous, and add a trailing comma.\n      );\n      console.log(\"Processing #\" + checkpoint + \" to #\" + nextCheckpoint);\n      checkpoint = nextCheckpoint;\n    }\n  }\n}\n\nexport { parseInputFile }\n","// ./bigBuzz.js\n// a specialty library for handling big integers.\n\nvar bigInt = require(\"big-integer\");\n\nvar bigFizzbuzzer = function (stringNumber, fizzer = 3, buzzer = 5, fizzOutput = \"Fizz\", buzzOutput = \"Buzz\") {\n    // one could argue that 0 is modulo all numbers, but I think this is better default behavior.\n    // The fizzer and buzzer are going to be javascript numbers.\n    if (bigInt(stringNumber).isSmall & bigInt(stringNumber).value === 0){\n      return 0\n    };\n    if ((bigInt(stringNumber).mod(fizzer).value === 0) && ((bigInt(stringNumber).mod(buzzer).value === 0))){\n        return \"\" + fizzOutput + buzzOutput + '!'\n    } else if (bigInt(stringNumber).mod(fizzer).value === 0) {\n        return (fizzOutput + \"!\")\n    } else if ((bigInt(stringNumber).mod(buzzer).value === 0)) {\n        return (buzzOutput + \"!\");\n    } else {\n        return bigInt(stringNumber).isSmall ? bigInt(stringNumber).value : bigInt(stringNumber).toString();\n    }\n}\n\nvar bigCreateFizzBuzz = function (start, end, fizzer = 3, buzzer = 5, fizzOutput = \"Fizz\", buzzOutput = \"Buzz\")  {\n    var output = [];\n    //bigInt(a).compare(b) => a<b: -1, a=b: 0, a>b: 1\n    var incre = bigInt(start).compare(end) * -1\n    // Bad code: while (bigInt(start).compare(end) != 0){ will not run the last number inclusive.\n    while (bigInt(start).compare(end) - incre !== 0){\n      output.push(bigFizzbuzzer(start, fizzer, buzzer, fizzOutput, buzzOutput));\n      // can do this without mutation?\n      start = bigInt(start).add(incre);\n    }\n    return output;\n}\n\nexport {\n    bigFizzbuzzer,\n    bigCreateFizzBuzz\n}\n","// src/index.js\nimport { processInput } from './processInput';\nimport { parseInputFile } from './fileOperations'; // tests require access to these functions.\n// these are needed for running the mocha tests.\nimport {fizzbuzzer, createFizzBuzz} from './fizzbuzz.js';\nimport {bigFizzbuzzer, bigCreateFizzBuzz} from './bigBuzz.js';\n\nvar inputObj = processInput();\nparseInputFile(inputObj); // this will actually call lockNums as a callback.\n\nconsole.log(\"bigbuzz\", bigCreateFizzBuzz('100000000000000001', '100000000000000015'))\n// these are needed for running the mocha tests.\nexport { fizzbuzzer, createFizzBuzz, bigFizzbuzzer, bigCreateFizzBuzz }\n"],"sourceRoot":"/source/"}