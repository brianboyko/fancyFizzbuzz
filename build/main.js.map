{"version":3,"sources":["constants.js","processInput.js","fizzbuzz.js","fileOperations.js","index.js"],"names":["fs"],"mappings":"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","file":"main.js","sourcesContent":["const VERSION = 'v1.0.0';\n\nconst HELP_TEXT = 'Help Text Goes Here'\n\nexport {\n  VERSION,\n  HELP_TEXT\n}","// considered using optimist but it was a bit overkill. \nimport { HELP_TEXT, VERSION } from './constants'\n\nvar getArgumentsFromCommandLine = function(){\n  // \"clArgs\": \"Command Line Arguments\"\n  var clArgs = []; \n    process.argv.forEach(function (val, index, array) {\n      clArgs.push(val);\n  });\n  return clArgs.slice(2); \n}\n\nvar showAndRemoveSpecialFlags = function(args, flags, text){\n  var showed = false; \n  for (var i = 0; i < flags.length; i++){\n    if (args.indexOf(flags[i]) != -1){\n      if (!showed) {\n       console.log(text); // help text and version text should never be written to file.\n       showed = true; \n      }\n      // removes the flag. \n      args.splice(args.indexOf(flags[i]), 1)\n    }\n  } \n  return args;\n} \n\n// using the switch fall-through here. \nvar parseFlags = function(argObj, args){\n  for (var i = 0; i < args.length; i++){\n    switch(args[i]){\n      case '-m':\n      case '-moduli':\n        if(!isNaN(Number(args[i+1]))){\n          argObj.firstModulus = Number(args[i+1]);\n        }\n        if(!isNaN(Number(args[i+2]))){\n          argObj.secondModulus = Number(args[i+2]);\n        }\n        break;\n      case '-i':\n      case '-input':\n        argObj.input = args[i+1]; \n        break; \n      case '-o':\n      case '-output':\n        argObj.output = args[i+1]; \n        break; \n      case '-t':\n      case '-terms':\n        argObj.fizzTerm = args[i+1];\n        argObj.buzzTerm = args[i+2];\n      default:\n      break;\n    }\n  }\n  return argObj; \n}\n\nvar processInput = function(){\n  const helpFlags = ['-h', 'h', 'help', '-help', '--help', '--v'];\n  const versionFlags = ['-v', 'v', '-version', '--version', '--v'];\n  var args = getArgumentsFromCommandLine();\n  args = showAndRemoveSpecialFlags(args, versionFlags, VERSION);\n  args = showAndRemoveSpecialFlags(args, helpFlags, HELP_TEXT);\n    // at this point, args should only contain the flags we're interested in.\n\n  var argumentObject = {\n    first: Number(args[0]), // required\n    last: Number(args[1]), // required\n    firstModulus: 3, // default. \n    secondModulus: 5, // default. \n    input: null,\n    output: null,\n    fizzTerm: \"Fizz\", // default.\n    buzzTerm: \"Buzz\", // default. \n  }\n\n  // modify the argument object with any special cases that the user has entered: \n  argumentObject = parseFlags(argumentObject, args); \n  return argumentObject; \n} \n\n\nexport { \n  getArgumentsFromCommandLine, \n  showAndRemoveSpecialFlags, \n  parseFlags, \n  parseInput, \n  processInput\n} \n","// ./fizzbuzz.js\n\nvar fizzbuzzer = function (number, fizzer = 3, buzzer = 5, fizzOutput = \"Fizz\", buzzOutput = \"Buzz\") {\n    // one could argue that 0 is modulo all numbers, but I think this is better default behavior. \n    if (number === 0){ return 0 }; \n\n    if ((number % fizzer === 0) && (number % buzzer === 0)){\n        return \"\" + fizzOutput + buzzOutput + '!'\n    } else if (number % fizzer === 0) {\n        return (fizzOutput + \"!\")\n    } else if (number % buzzer === 0) {\n        return (buzzOutput + \"!\");\n    } else {\n        return number;\n    }\n}\n\nvar createFizzBuzz = function (start, end, fizzer = 3, buzzer = 5, fizzOutput = \"Fizz\", buzzOutput = \"Buzz\")  {\n    var output = []; \n    var incre = 1; \n    if (start > end) {\n      incre = -1;\n    }\n    for (var i = start; (end >= start) ? (i <= end) : (i >= end) ; i = i + incre) {\n        output.push(fizzbuzzer(i, fizzer, buzzer, fizzOutput, buzzOutput));\n    }\n    return output; \n}\n\nexport {\n    fizzbuzzer,\n    createFizzBuzz\n}\n","const fs = require('fs')\n\nimport { fizzbuzzer, createFizzBuzz } from './fizzbuzz'\n\n\n// step 2: Check to see if we will get the parameters from an input file. \nexport function parseInputFile(inputObj){\n  if (inputObj.input !== null){\n  // step 2a: Yes we will! \n    var fileName = inputObj.input; \n    fs.exists(fileName, function(exists) {\n      if (exists) {\n        fs.stat(fileName, function(error, stats) {\n          fs.open(fileName, \"r\", function(error, fd) {\n            var buffer = new Buffer(stats.size);\n\n            fs.read(fd, buffer, 0, buffer.length, null, function(error, bytesRead, buffer) {\n              var data = buffer.toString(\"utf8\", 0, buffer.length);\n                // sneaky way of turning strings into data we can use. \n                data = JSON.parse('[' + data + ']');\n                inputObj.first = data[0];\n                inputObj.last = data[1];\n              // sadly, until async/await is full implimented in ES7, \n              // we are stuck in this callback.  Neverfear, though. \n\n              console.log(\"inputObj: \\n\", inputObj); \n              \n              fs.close(fd);\n              delete inputObj.input; // we can delete this because we no longer need it. We have our numbers. \n              lockNums(inputObj); // call lockNums and pass in the new numbers we got from the file; \n            });\n          });\n        });\n      }\n    });\n  } else {\n    // step 2b: No we won't!\n    delete inputObj.input; // we can delete this because it was null to begin with.  \n    lockNums(inputObj); // call lockNums and pass in the numbers \n  }\n}\n\n// because this is asynchronous, we must use callbacks, instead of return statements, to make sure that items\n// execute in the correct order. (On a refactor, promisification looks promising. No pun intended.)\n\n\nexport function lockNums(inputObj) { // like the name suggests, the numbers we're using will be locked by this point. \n  if (isNaN(inputObj.first) || isNaN(inputObj.last)){\n    console.log(\"Oops, Cannot find parameters\") // Oddly enough, some tests will produce this. \n    return; \n  }\n\n  console.log(\"inputObj in lockNums\", inputObj)\n   if (inputObj.output !== null){\n    var stream = fs.createWriteStream(inputObj.output);\n    stream.once('open', function(fd) {\n      console.log(\"this\", this)\n      var streamOut = stream.write.bind(this); // bind(this) is needed, otherwise this._writableState will be undefined\n      writeOutAll(streamOut, inputObj); // dependency injection FTW! \n      stream.end();\n    });\n  } else {\n    writeOutAll(console.log, inputObj); \n  }\n}\n\nexport function writeOutAll(outputFunc, inputObj){ // output.func will either be a a file stream OR console.log, if no file was specified. \n    console.log(\"outputFunc\", outputFunc)\n    const chunkSize = 10000\n    var complete = false;\n    var checkpoint = inputObj.first; \n    var nextCheckpoint; \n    console.log(checkpoint)\n    while(!complete){\n      console.log(\"checkpoint\", checkpoint);\n      if (Math.abs(checkpoint - inputObj.last) < chunkSize){\n        console.log(\"Math.abs(checkpoint - inputObj.last)\",Math.abs(checkpoint - inputObj.last))\n        outputFunc( // console or file\n          JSON.stringify( // stream needs to be a string.\n            createFizzBuzz(checkpoint, inputObj.last, inputObj.firstModulus, inputObj.secondModulus, inputObj.fizzTerm, inputObj.buzzTerm)\n          ).slice(1, -1) // we want to take off those pesky array \"[\" and \"]\" characters, so that our number line is contiguous\n        )\n        complete = true; \n      } else {\n        if(checkpoint < inputObj.last){\n          // if we're counting up. \n          nextCheckpoint = checkpoint + (chunkSize); \n        } else {\n          // if we're counting down. \n          nextCheckpoint = checkpoint - (chunkSize); \n        }\n        outputFunc( // console or file\n          JSON.stringify( // stream needs to be a string.\n            createFizzBuzz(checkpoint, nextCheckpoint -1 , inputObj.firstModulus, inputObj.secondModulus, inputObj.fizzTerm, inputObj.buzzTerm)\n          ).slice(1, -1) + ',' // we want to take off those pesky array \"[\" and \"]\" characters, so that our number line is contiguous, and add a trailing comma. \n        )        \n        console.log(\"Processing #\" + checkpoint + \" to #\" + nextCheckpoint)\n        checkpoint = nextCheckpoint; \n      }\n   }\n}","// index.js\nimport { HELP_TEXT, VERSION } from './constants'\nimport { fizzbuzzer, createFizzBuzz } from './fizzbuzz'\nimport { \n  getArgumentsFromCommandLine, \n  showAndRemoveSpecialFlags, \n  parseFlags, \n  parseInput, \n  processInput\n} from './processInput'\n\nimport { parseInputFile, writeOutAll } from './fileOperations.js' // tests require access to these functions. \n\nconst fs = require('fs')\n\nvar outputLog = []; \n\n// step 1: Get initial command line parameters. \nvar inputObj = processInput();\nconsole.log(\"inputObj: \\n\", inputObj); \n\n// Step 2 is in \"fileOperations.js\"\nparseInputFile(inputObj); // this will actually call lockNums as a callback. \n\n\n\nexport { fizzbuzzer, createFizzBuzz }"],"sourceRoot":"/source/"}